#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat May 18 15:51:46 2019

@author: keziah
"""

import numpy as np
from detectorbank import DetectorBank
import matplotlib.pyplot as plt
import seaborn as sns
from save_plot import SavePlot, SaveLegend

sns.set_style('whitegrid')

sp = SavePlot(False, '../Visualisation/residue_pitch.pdf', 
              auto_overwrite=True)
sl = SaveLegend('../Visualisation/combination_tones_legend.pdf', 
                auto_overwrite=True)

#logfile = './results/combination_tones_bw=5.txt'
#logfile = './results/combination_tones_bw=5.txt'

def combination_tones(f, kmax=5, sr=48000):
    
    f1 = np.max(f)
    f2 = np.min(f)
    
    diff_tone = f1-f2
    
    f = np.append(f, diff_tone)
    
    for k in range(1, kmax):
        com_tone = f1 - k*(f2-f1)
        if 0 < com_tone < sr/2:
            f = np.append(f, com_tone)
        else:
            print('{} Hz out of range')
    
    return f


def residue_pitch(f0, size, sr=48000):
     f = np.array([f0*k for k in range(2, size) if f0*k < sr/2])
     return f
    
    


   
sr = 48000

f0 = 250
f = residue_pitch(f0, size=9, sr=sr)

#f = np.array([1000, 1500])

#print(f)

length = 2
t = np.linspace(0, 2*np.pi*length, sr*length)
audio = np.zeros(sr*length)
for freq in f:
    audio += np.sin(freq*t)
audio /= np.max(audio)
audio = np.append(audio, np.zeros(sr))


f = np.append(f0, f)

#f = combination_tones(f, kmax=6, sr=sr)

print(f)

method = DetectorBank.runge_kutta
f_norm = DetectorBank.freq_unnormalized
a_norm = DetectorBank.amp_normalized
gain = 25
d = 0.0001
bandwidth = np.zeros(len(f))
#bandwidth.fill(5)
det_char = np.array(list(zip(f, bandwidth)))
 
z = np.zeros((len(f),len(audio)), dtype=np.complex128)    
r = np.zeros(z.shape) 

det = DetectorBank(sr, audio, 4, det_char, method|f_norm|a_norm, d, gain)

det.getZ(z) 
det.absZ(r, z)



t = np.linspace(0, len(audio)/sr, len(audio))
#c = ['darkmagenta', 'orange', 'red']

t0 = 0
t1 = len(audio)

labels = ['{} Hz'.format(f[k]) for k in range(len(f))]
c = ['red', 'darkorange', 'deeppink', 'darkmagenta', 'green', 
     'skyblue', 'blue', 'darkslategrey']


for k in range(r.shape[0]):
    plt.plot(t, r[k], color=c[k], label=labels[k])
    
plt.xlabel('Time (s)')
plt.ylabel('|z|', rotation='horizontal')
plt.grid(True)
#plt.legend()

sp.plot(plt)

out = 'This file was generated by {}\n\n'.format(__file__)
for n, freq in enumerate(f):
    out += '{:4.0f} Hz response max: {:.6f}\n'.format(freq, np.max(r[n]))
    
#with open(logfile, 'w') as fileobj:
#    fileobj.write(out)

#sl.plot(labels=labels, colours=c[:len(labels)], title='Detector frequencies', 
#        ncol=2)
