#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Plot responses near to the driving frequency
"""

import numpy as np
from detectorbank import DetectorBank
import peakdetect as pk
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator
import seaborn as sns

from save_plot import SavePlot

sns.set_style('whitegrid')

sp = SavePlot(False)

def formatLabelFreq(label):
    if label == 27.5:
        return('{0:.1f} Hz'.format(label))
    else:
        return('{0:.3f} Hz'.format(label))
        
def formatLabelFreqDiff(label):
    if label == 440.0:
        return('{0:.0f} Hz'.format(label))
    else:
        return('${:.0f}\pm${:.1f} Hz'.format(f[0], abs(f0-label)))


#### DetectorBank parameters and making audio

method = DetectorBank.runge_kutta
f_norm = DetectorBank.freq_unnormalized
a_norm = DetectorBank.amp_normalized
    
sr = 48000
f0 = 440
amp = 1.4
d = 0.0001

length = 2
t = np.linspace(0, 2*np.pi*f0*length, sr*length)
audio = np.sin(t)
audio = np.append(audio, np.zeros(sr))


#### plot figure


f = np.array([f0, f0+1, f0+2])

bandwidth = np.zeros(len(f))
det_char = np.array(list(zip(f, bandwidth)))
 
z = np.zeros((len(f),len(audio)), dtype=np.complex128)    
r = np.zeros(z.shape) 

det = DetectorBank(sr, audio, 4, det_char, method|f_norm|a_norm, d, amp)

det.getZ(z) 
det.absZ(r, z)

t = np.linspace(0, len(audio)/sr, len(audio))
c = ['darkmagenta', 'orange', 'red']
style = ['-', ':', '--'] 
#t *= 1000
t0 = 0
t1 = len(audio) # int(sr * 0.2) # 
for k in range(len(r)):
    plt.plot(t[t0:t1], r[k][t0:t1], c[k], label=f[k])
    print('Det freq: {}Hz'.format(det.getW(k)/(2*np.pi)))
#    plt.plot(t[t0:t1], r[k][t0:t1], 'black', label=f[k], linestyle=style[k])
    


#### make table of time advances 
    
# need a new DetectorBank for this, as we're using more frequencies
f = np.linspace(f0, f0+5, num=11)

bandwidth = np.zeros(len(f))
det_char = np.array(list(zip(f, bandwidth)))
 
z = np.zeros((len(f),len(audio)), dtype=np.complex128)    
r = np.zeros(z.shape) 

det = DetectorBank(sr, audio, 4, det_char, method|f_norm|a_norm, d, amp)
det.getZ(z)
det.absZ(r, z)

#for k in range(len(r)):
#    plt.plot(t, r[k], label=f[k])

out = 'Generated by ' + __file__ + '\n\n'
out += 'Propinquitous frequencies\n'
out += ('Table of expected maxima times (Half period) and found maxima (Max '
        'time)\nfor frequency difference of 0.5Hz to 5Hz\n')
out += 'Input frequency: {}Hz\n'.format(f0)
out += 'Damping factor: {:.0e}\n'.format(d)
out += 'Amplitude unnormalised; gain: {}\n'.format(amp)
out += '\n'


heading = 'Df (Hz) | Half period (ms) | Max. time (ms) | Time advance (ms)'
out += heading + '\n' + '-'*len(heading) + '\n'
    
for k in range(1, len(r)):
    
    maxima, minima = pk.peakdet(r[k], 0.02, t)
    
#    print(len(maxima))
#    print(len(minima))
    
#    l_max = maxima[0][0]
    
    # difference between detector and driving freq
    diffHz = f[k] - f0
    
    # expected max time
    expmax = 1 / (2*diffHz)
    expmax_ms = 1000*expmax
    
    # found max time
    fndmax = maxima[0][0]
    fndmax_ms = 1000*fndmax
    
    diffms = 1000*(expmax-fndmax)
    
    out += ('   {:.1f}  |      {:6.1f}      |     {:5.1f}      |       {:.4g}\n'
          .format(diffHz, expmax_ms, fndmax_ms, diffms))
#    out += (' {:.1f} & {:.4g} & {:.4g} & {:.4g} \\\\ \n'
#          .format(diffHz, expmax_ms, fndmax_ms, diffms))
    
#    print('{}Hz difference; expected maximum at {}ms, found maximum at {}ms'
#          .format(diffHz, expmax_ms, fndmax_ms))
#    print('Time advance of {}ms'.format(expmax_ms-fndmax_ms))
    
    
    #### old stuff to plot markers on maxima and minima and calcaulte osc freq
#    l_min = minima[0][0]
#    f_osc = 0.5 / (l_min - l_max)
    
#    plt.scatter(*zip(*maxima), marker='+', linewidth=1, color='black', 
#                zorder=10)
#    plt.scatter(*zip(*minima), marker='x', linewidth=1, color='grey', 
#                zorder=10)
    
##    plt.axvline(x=l_max, color=c[k], linestyle=':', linewidth=1)
##    plt.axvline(x=l_min, color=c[k], linestyle='--', linewidth=1)

#    print('{:.0f}Hz difference:\n\tLocal max at {:.4f}s'
#          '\n\tLocal min at {:.4f}s\n\tOscillation frequency: {:.4f}Hz'
#          .format(abs(f0-f[k]), l_max, l_min, f_osc))
          
    
    
#with open('results/prop_freq_time_advance.txt', 'w') as fileobj:
#    fileobj.write(out)
print(out)
    
    
#y = np.sin(np.linspace(0, 2*np.pi*2.0199*length, sr*length))
#y = np.append(y, np.zeros(sr))
#plt.plot(t, y, 'lime')
    
    
    
    
    
majorLocator = MultipleLocator(1)
minorLocator = MultipleLocator(0.5)
    
ax = plt.gca()
#ax.xaxis.set_major_locator(majorLocator)
#ax.xaxis.set_minor_locator(minorLocator)
#ax.grid(True, 'both')
ax.yaxis.labelpad = 10

plt.grid(True)
    
handles, labels = ax.get_legend_handles_labels()
labels, handles = zip(*sorted(zip(map(float,labels), handles)))
labels = map(formatLabelFreqDiff, labels)
plt.legend(handles, labels, title='Detector freq.')#, bbox_to_anchor=(1.0, 1))

plt.xlabel('Time (s)')
plt.ylabel('|z|', rotation='horizontal')

# make plot slightly wider, so the legend doesn't overlap with the line
plt.xlim(right=3.25)

sp.plot(plt)

